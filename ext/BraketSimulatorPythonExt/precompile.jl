# exclude precompilation from coverage 
# COV_EXCL_START
function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    Base.precompile(Tuple{typeof(jl_convert_sim_hadamard),Type{Instruction},Py})   # time: 4.069578
    Base.precompile(Tuple{typeof(jl_convert_sim_ccnot),Type{Instruction},Py})   # time: 4.062121
    Base.precompile(Tuple{typeof(jl_convert_sim_ms),Type{Instruction},Py})   # time: 0.955029
    Base.precompile(Tuple{typeof(jl_convert_sim_t),Type{Instruction},Py})   # time: 0.6783085
    Base.precompile(Tuple{typeof(jl_convert_sim_expectation),Type{Expectation},Py})   # time: 0.038223874
    Base.precompile(Tuple{typeof(jl_convert_sim_circuit),Type{Circuit},Py})   # time: 0.03533442
    Base.precompile(Tuple{typeof(jl_convert_unitary),Type{Instruction},Py})   # time: 0.027361924
    Base.precompile(Tuple{Type{Py},Unitary,Int64})   # time: 0.026723202
    Base.precompile(Tuple{typeof(jl_convert_rx),Type{Instruction},Py})   # time: 0.023733344
    Base.precompile(Tuple{typeof(jl_convert_sim_pswap),Type{Instruction},Py})   # time: 0.023334414
    Base.precompile(Tuple{typeof(jl_convert_h),Type{Instruction},Py})   # time: 0.022813423
    Base.precompile(Tuple{typeof(jl_convert_sim_unitary),Type{Instruction},Py})   # time: 0.020974178
    Base.precompile(Tuple{typeof(jl_convert_sim_swap),Type{Instruction},Py})   # time: 0.020104373
    Base.precompile(Tuple{Type{Py},Y,Int64})   # time: 0.01982708
    Base.precompile(Tuple{typeof(jl_convert_variance),Type{Result},Py})   # time: 0.019344633
    Base.precompile(Tuple{typeof(jl_convert_sim_v),Type{Instruction},Py})   # time: 0.018243905
    Base.precompile(Tuple{typeof(jl_convert_sample),Type{Braket.IR.Sample},Py})   # time: 0.01726625
    Base.precompile(Tuple{Type{Py},H,Int64})   # time: 0.016084041
    Base.precompile(Tuple{typeof(jl_convert_cswap),Type{Instruction},Py})   # time: 0.015082077
    Base.precompile(Tuple{Type{Py},Kraus,Int64})   # time: 0.014347842
    Base.precompile(Tuple{typeof(jl_convert_sim_rx),Type{Instruction},Py})   # time: 0.013351584
    Base.precompile(Tuple{typeof(jl_convert_kraus),Type{Instruction},Py})   # time: 0.012242024
    Base.precompile(Tuple{typeof(jl_convert_amplitude),Type{Result},Py})   # time: 0.012057122
    Base.precompile(Tuple{Type{Py},Braket.IR.Sample})   # time: 0.011385189
    Base.precompile(Tuple{Type{Py},Rx,Int64})   # time: 0.009975795
    Base.precompile(Tuple{Type{Py},PauliChannel,Int64})   # time: 0.009341211
    Base.precompile(Tuple{Type{Py},CPhaseShift,Vector{Int64}})   # time: 0.009008459
    Base.precompile(Tuple{Type{Py},XX,Vector{Int64}})   # time: 0.008844133
    Base.precompile(Tuple{Type{Py},GeneralizedAmplitudeDamping,Int64})   # time: 0.008780249
    Base.precompile(Tuple{typeof(jl_convert_sim_u),Type{Instruction},Py})   # time: 0.008422085
    Base.precompile(Tuple{typeof(jl_convert_sim_pauliy),Type{Instruction},Py})   # time: 0.007263667
    Base.precompile(Tuple{typeof(jl_convert_sim_iswap),Type{Instruction},Py})   # time: 0.007223044
    Base.precompile(Tuple{typeof(jl_convert_sim_cv),Type{Instruction},Py})   # time: 0.006798748
    Base.precompile(Tuple{Type{Py},TwoQubitDepolarizing,Vector{Int64}})   # time: 0.006736961
    Base.precompile(Tuple{Type{Py},AmplitudeDamping,Int64})   # time: 0.006688375
    Base.precompile(Tuple{Type{Py},BitFlip,Int64})   # time: 0.006677124
    Base.precompile(Tuple{Type{Py},Braket.IR.Amplitude})   # time: 0.005732755
    Base.precompile(Tuple{typeof(jl_convert_sim_gpi),Type{Instruction},Py})   # time: 0.005568174
    Base.precompile(Tuple{typeof(jl_convert_sim_gpi2),Type{Instruction},Py})   # time: 0.005363209
    Base.precompile(Tuple{typeof(jl_convert_sim_ti),Type{Instruction},Py})   # time: 0.005310285
    Base.precompile(Tuple{typeof(jl_convert_sim_cy),Type{Instruction},Py})   # time: 0.004843577
    Base.precompile(Tuple{typeof(jl_convert_sim_ecr),Type{Instruction},Py})   # time: 0.004792136
    Base.precompile(Tuple{typeof(jl_convert_sim_cx),Type{Instruction},Py})   # time: 0.004750581
    Base.precompile(Tuple{typeof(jl_convert_sim_tensorproduct),Type{Braket.Observables.TensorProduct},Py})   # time: 0.004594044
    Base.precompile(Tuple{Type{Py},CCNot,Vector{Int64}})   # time: 0.004553954
    Base.precompile(Tuple{typeof(jl_convert_sim_si),Type{Instruction},Py})   # time: 0.004551422
    Base.precompile(Tuple{typeof(jl_convert_sim_s),Type{Instruction},Py})   # time: 0.004356335
    Base.precompile(Tuple{Type{Py},CNot,Vector{Int64}})   # time: 0.004333968
    Base.precompile(Tuple{Type{Py},CSwap,Vector{Int64}})   # time: 0.004275542
    Base.precompile(Tuple{Type{Py},Braket.IR.Variance})   # time: 0.004235879
    isdefined(BraketSimulatorPythonExt, Symbol("#200#203")) && Base.precompile(Tuple{getfield(BraketSimulatorPythonExt, Symbol("#200#203")),Vector{Vector{Vector{Float64}}}})   # time: 0.004178667
    Base.precompile(Tuple{Type{Py},Braket.IR.Probability})   # time: 0.003938506
    Base.precompile(Tuple{typeof(jl_convert_sim_cswap),Type{Instruction},Py})   # time: 0.003825418
    Base.precompile(Tuple{typeof(jl_convert_sample),Type{Result},Py})   # time: 0.003769501
    Base.precompile(Tuple{Type{Py},Swap,Vector{Int64}})   # time: 0.003719379
    Base.precompile(Tuple{typeof(jl_convert_sim_vi),Type{Instruction},Py})   # time: 0.0035945
    Base.precompile(Tuple{typeof(jl_convert_sim_cz),Type{Instruction},Py})   # time: 0.003538254
    Base.precompile(Tuple{Type{Py},Braket.IR.StateVector})   # time: 0.003453085
    Base.precompile(Tuple{typeof(jl_convert_sim_pauliz),Type{Instruction},Py})   # time: 0.003431751
    Base.precompile(Tuple{typeof(jl_convert_sim_paulix),Type{Instruction},Py})   # time: 0.003320504
    Base.precompile(Tuple{typeof(jl_convert_pswap),Type{Instruction},Py})   # time: 0.003172204
    Base.precompile(Tuple{typeof(jl_convert_swap),Type{Instruction},Py})   # time: 0.002924624
    Base.precompile(Tuple{typeof(jl_convert_xx),Type{Instruction},Py})   # time: 0.002914494
    Base.precompile(Tuple{typeof(jl_convert_sim_kraus),Type{Instruction},Py})   # time: 0.002910414
    Base.precompile(Tuple{typeof(jl_convert_yy),Type{Instruction},Py})   # time: 0.002890207
    Base.precompile(Tuple{typeof(jl_convert_zz),Type{Instruction},Py})   # time: 0.00281137
    Base.precompile(Tuple{typeof(jl_convert_xy),Type{Instruction},Py})   # time: 0.002786786
    Base.precompile(Tuple{typeof(jl_convert_sim_identity),Type{Instruction},Py})   # time: 0.002566664
    Base.precompile(Tuple{typeof(jl_convert_twoqubitdeph),Type{Instruction},Py})   # time: 0.002555956
    Base.precompile(Tuple{typeof(jl_convert_probability),Type{Braket.IR.Probability},Py})   # time: 0.002520084
    Base.precompile(Tuple{typeof(jl_convert_twoqubitdepo),Type{Instruction},Py})   # time: 0.002515583
    Base.precompile(Tuple{typeof(jl_convert_ccnot),Type{Instruction},Py})   # time: 0.002464667
    Base.precompile(Tuple{typeof(jl_convert_iswap),Type{Instruction},Py})   # time: 0.002382664
    Base.precompile(Tuple{typeof(jl_convert_ecr),Type{Instruction},Py})   # time: 0.002374331
    Base.precompile(Tuple{typeof(jl_convert_sim_xy),Type{Instruction},Py})   # time: 0.002349709
    Base.precompile(Tuple{typeof(jl_convert_amplitude),Type{Braket.IR.Amplitude},Py})   # time: 0.002313753
    Base.precompile(Tuple{typeof(jl_convert_sim_zz),Type{Instruction},Py})   # time: 0.002170706
    Base.precompile(Tuple{typeof(jl_convert_sim_cphaseshift01),Type{Instruction},Py})   # time: 0.002137789
    Base.precompile(Tuple{typeof(jl_convert_sim_yy),Type{Instruction},Py})   # time: 0.002135206
    Base.precompile(Tuple{typeof(jl_convert_sim_xx),Type{Instruction},Py})   # time: 0.002103248
    Base.precompile(Tuple{typeof(jl_convert_sim_phaseshift),Type{Instruction},Py})   # time: 0.002098207
    Base.precompile(Tuple{typeof(jl_convert_sim_cphaseshift00),Type{Instruction},Py})   # time: 0.002065292
    Base.precompile(Tuple{typeof(jl_convert_sim_cphaseshift),Type{Instruction},Py})   # time: 0.002059374
    Base.precompile(Tuple{typeof(jl_convert_sim_amplitude),Type{Amplitude},Py})   # time: 0.002047921
    Base.precompile(Tuple{typeof(jl_convert_sim_ry),Type{Instruction},Py})   # time: 0.002044793
    Base.precompile(Tuple{typeof(jl_convert_sim_cphaseshift10),Type{Instruction},Py})   # time: 0.002035881
    Base.precompile(Tuple{typeof(jl_convert_sim_rz),Type{Instruction},Py})   # time: 0.002024373
    Base.precompile(Tuple{typeof(jl_convert_densitymatrix),Type{Result},Py})   # time: 0.001927452
    Base.precompile(Tuple{Type{Py},PSwap,Vector{Int64}})   # time: 0.001503501
    Base.precompile(Tuple{Type{Py},PhaseShift,Int64})   # time: 0.001431208
    Base.precompile(Tuple{Type{Py},CPhaseShift10,Vector{Int64}})   # time: 0.001422416
    Base.precompile(Tuple{Type{Py},ZZ,Vector{Int64}})   # time: 0.00141346
    Base.precompile(Tuple{Type{Py},YY,Vector{Int64}})   # time: 0.001400543
    Base.precompile(Tuple{Type{Py},CPhaseShift01,Vector{Int64}})   # time: 0.001392998
    Base.precompile(Tuple{Type{Py},PhaseDamping,Int64})   # time: 0.001385749
    Base.precompile(Tuple{Type{Py},CPhaseShift00,Vector{Int64}})   # time: 0.0013775
    Base.precompile(Tuple{Type{Py},Rz,Int64})   # time: 0.001376293
    Base.precompile(Tuple{Type{Py},XY,Vector{Int64}})   # time: 0.001373749
    Base.precompile(Tuple{Type{Py},Braket.IR.Expectation})   # time: 0.001367163
    Base.precompile(Tuple{Type{Py},Ry,Int64})   # time: 0.001363999
    Base.precompile(Tuple{typeof(jl_convert_sim_paulix),Type{Braket.Observables.X},Py})   # time: 0.001346668
    isdefined(BraketSimulatorPythonExt, Symbol("#196#198")) && Base.precompile(Tuple{getfield(BraketSimulatorPythonExt, Symbol("#196#198")),Vector{Vector{Float64}}})   # time: 0.001279959
    Base.precompile(Tuple{typeof(jl_convert_sim_hadamard),Type{Braket.Observables.H},Py})   # time: 0.001278625
    isdefined(BraketSimulatorPythonExt, Symbol("#183#186")) && Base.precompile(Tuple{getfield(BraketSimulatorPythonExt, Symbol("#183#186")),Vector{Vector{Float64}}})   # time: 0.001273957
    Base.precompile(Tuple{Type{Py},Depolarizing,Int64})   # time: 0.001271042
    Base.precompile(Tuple{Type{Py},Braket.IR.DensityMatrix})   # time: 0.001246538
    Base.precompile(Tuple{Type{Py},PhaseFlip,Int64})   # time: 0.001245335
    Base.precompile(Tuple{Type{Py},TwoQubitDephasing,Vector{Int64}})   # time: 0.001219169
    isdefined(BraketSimulatorPythonExt, Symbol("#201#204")) && Base.precompile(Tuple{getfield(BraketSimulatorPythonExt, Symbol("#201#204")),Vector{Vector{Float64}}})   # time: 0.001131461
end
# COV_EXCL_STOP
